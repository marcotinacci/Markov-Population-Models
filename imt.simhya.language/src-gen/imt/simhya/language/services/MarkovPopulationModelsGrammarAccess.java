/*
* generated by Xtext
*/
package imt.simhya.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MarkovPopulationModelsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "main");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cConstDefAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cConstDefConstantParserRuleCall_0_0 = (RuleCall)cConstDefAssignment_0.eContents().get(0);
		private final Assignment cPopulationDefAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cPopulationDefPopulationParserRuleCall_1_0 = (RuleCall)cPopulationDefAssignment_1.eContents().get(0);
		private final Assignment cAgentDefAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cAgentDefAgentParserRuleCall_2_0 = (RuleCall)cAgentDefAssignment_2.eContents().get(0);
		
		////extension
		//main:
		//	constDef+=constant* & populationDef=population & agentDef=agent;
		public ParserRule getRule() { return rule; }

		//constDef+=constant* & populationDef=population & agentDef=agent
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//constDef+=constant*
		public Assignment getConstDefAssignment_0() { return cConstDefAssignment_0; }

		//constant
		public RuleCall getConstDefConstantParserRuleCall_0_0() { return cConstDefConstantParserRuleCall_0_0; }

		//populationDef=population
		public Assignment getPopulationDefAssignment_1() { return cPopulationDefAssignment_1; }

		//population
		public RuleCall getPopulationDefPopulationParserRuleCall_1_0() { return cPopulationDefPopulationParserRuleCall_1_0; }

		//agentDef=agent
		public Assignment getAgentDefAssignment_2() { return cAgentDefAssignment_2; }

		//agent
		public RuleCall getAgentDefAgentParserRuleCall_2_0() { return cAgentDefAgentParserRuleCall_2_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cConstIntegerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConstINTAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cConstINTINTTerminalRuleCall_0_3_0 = (RuleCall)cConstINTAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cConstRealKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cConstFLOATAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cConstFLOATFLOATTerminalRuleCall_1_3_0 = (RuleCall)cConstFLOATAssignment_1_3.eContents().get(0);
		
		//constant:
		//	"const integer" name=ID "=" constINT=INT | "const real" name=ID "=" constFLOAT=FLOAT;
		public ParserRule getRule() { return rule; }

		//"const integer" name=ID "=" constINT=INT | "const real" name=ID "=" constFLOAT=FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"const integer" name=ID "=" constINT=INT
		public Group getGroup_0() { return cGroup_0; }

		//"const integer"
		public Keyword getConstIntegerKeyword_0_0() { return cConstIntegerKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//constINT=INT
		public Assignment getConstINTAssignment_0_3() { return cConstINTAssignment_0_3; }

		//INT
		public RuleCall getConstINTINTTerminalRuleCall_0_3_0() { return cConstINTINTTerminalRuleCall_0_3_0; }

		//"const real" name=ID "=" constFLOAT=FLOAT
		public Group getGroup_1() { return cGroup_1; }

		//"const real"
		public Keyword getConstRealKeyword_1_0() { return cConstRealKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//constFLOAT=FLOAT
		public Assignment getConstFLOATAssignment_1_3() { return cConstFLOATAssignment_1_3; }

		//FLOAT
		public RuleCall getConstFLOATFLOATTerminalRuleCall_1_3_0() { return cConstFLOATFLOATTerminalRuleCall_1_3_0; }
	}

	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cActionsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActLabelParserRuleCall_4_0 = (RuleCall)cActAssignment_4.eContents().get(0);
		private final Assignment cSAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSStateParserRuleCall_5_0 = (RuleCall)cSAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//agent:
		//	"agent" name=ID "{" "actions" act+=label+ s+=state+ "}";
		public ParserRule getRule() { return rule; }

		//"agent" name=ID "{" "actions" act+=label+ s+=state+ "}"
		public Group getGroup() { return cGroup; }

		//"agent"
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"actions"
		public Keyword getActionsKeyword_3() { return cActionsKeyword_3; }

		//act+=label+
		public Assignment getActAssignment_4() { return cActAssignment_4; }

		//label
		public RuleCall getActLabelParserRuleCall_4_0() { return cActLabelParserRuleCall_4_0; }

		//s+=state+
		public Assignment getSAssignment_5() { return cSAssignment_5; }

		//state
		public RuleCall getSStateParserRuleCall_5_0() { return cSStateParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "label");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//label:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "state");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpontaneousActAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpontaneousActActionParserRuleCall_3_0 = (RuleCall)cSpontaneousActAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//state:
		//	"state" name=ID "{" spontaneousAct+=action+ "}";
		public ParserRule getRule() { return rule; }

		//"state" name=ID "{" spontaneousAct+=action+ "}"
		public Group getGroup() { return cGroup; }

		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//spontaneousAct+=action+
		public Assignment getSpontaneousActAssignment_3() { return cSpontaneousActAssignment_3; }

		//action
		public RuleCall getSpontaneousActActionParserRuleCall_3_0() { return cSpontaneousActActionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActRefLabelCrossReference_0_0 = (CrossReference)cActRefAssignment_0.eContents().get(0);
		private final RuleCall cActRefLabelIDTerminalRuleCall_0_0_1 = (RuleCall)cActRefLabelCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateRefStateCrossReference_2_0 = (CrossReference)cStateRefAssignment_2.eContents().get(0);
		private final RuleCall cStateRefStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateRefStateCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLocalRateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLocalRateLocal_rateParserRuleCall_4_0 = (RuleCall)cLocalRateAssignment_4.eContents().get(0);
		
		//// TODO guards
		//action:
		//	actRef=[label] "-->" stateRef=[state] ":" localRate=local_rate;
		public ParserRule getRule() { return rule; }

		//actRef=[label] "-->" stateRef=[state] ":" localRate=local_rate
		public Group getGroup() { return cGroup; }

		//actRef=[label]
		public Assignment getActRefAssignment_0() { return cActRefAssignment_0; }

		//[label]
		public CrossReference getActRefLabelCrossReference_0_0() { return cActRefLabelCrossReference_0_0; }

		//ID
		public RuleCall getActRefLabelIDTerminalRuleCall_0_0_1() { return cActRefLabelIDTerminalRuleCall_0_0_1; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1; }

		//stateRef=[state]
		public Assignment getStateRefAssignment_2() { return cStateRefAssignment_2; }

		//[state]
		public CrossReference getStateRefStateCrossReference_2_0() { return cStateRefStateCrossReference_2_0; }

		//ID
		public RuleCall getStateRefStateIDTerminalRuleCall_2_0_1() { return cStateRefStateIDTerminalRuleCall_2_0_1; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//localRate=local_rate
		public Assignment getLocalRateAssignment_4() { return cLocalRateAssignment_4; }

		//local_rate
		public RuleCall getLocalRateLocal_rateParserRuleCall_4_0() { return cLocalRateLocal_rateParserRuleCall_4_0; }
	}

	public class Local_rateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "local_rate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cConstRefConstantCrossReference_0_0 = (CrossReference)cConstRefAssignment_0.eContents().get(0);
		private final RuleCall cConstRefConstantIDTerminalRuleCall_0_0_1 = (RuleCall)cConstRefConstantCrossReference_0_0.eContents().get(1);
		private final Assignment cLocalRateAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLocalRateFLOATTerminalRuleCall_1_0 = (RuleCall)cLocalRateAssignment_1.eContents().get(0);
		
		//local_rate:
		//	constRef=[constant] | localRate=FLOAT;
		public ParserRule getRule() { return rule; }

		//constRef=[constant] | localRate=FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//constRef=[constant]
		public Assignment getConstRefAssignment_0() { return cConstRefAssignment_0; }

		//[constant]
		public CrossReference getConstRefConstantCrossReference_0_0() { return cConstRefConstantCrossReference_0_0; }

		//ID
		public RuleCall getConstRefConstantIDTerminalRuleCall_0_0_1() { return cConstRefConstantIDTerminalRuleCall_0_0_1; }

		//localRate=FLOAT
		public Assignment getLocalRateAssignment_1() { return cLocalRateAssignment_1; }

		//FLOAT
		public RuleCall getLocalRateFLOATTerminalRuleCall_1_0() { return cLocalRateFLOATTerminalRuleCall_1_0; }
	}

	public class PopulationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "population");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPopulationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInitKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAgentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAgentsInitParserRuleCall_4_0 = (RuleCall)cAgentsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVerticalLineVerticalLineKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAgentsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAgentsInitParserRuleCall_5_1_0 = (RuleCall)cAgentsAssignment_5_1.eContents().get(0);
		private final Assignment cTranAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTranGl_tranParserRuleCall_6_0 = (RuleCall)cTranAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//population:
		//	"population" name=ID "{" "init" agents+=init ("||" agents+=init)* tran+=gl_tran+ "}";
		public ParserRule getRule() { return rule; }

		//"population" name=ID "{" "init" agents+=init ("||" agents+=init)* tran+=gl_tran+ "}"
		public Group getGroup() { return cGroup; }

		//"population"
		public Keyword getPopulationKeyword_0() { return cPopulationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"init"
		public Keyword getInitKeyword_3() { return cInitKeyword_3; }

		//agents+=init
		public Assignment getAgentsAssignment_4() { return cAgentsAssignment_4; }

		//init
		public RuleCall getAgentsInitParserRuleCall_4_0() { return cAgentsInitParserRuleCall_4_0; }

		//("||" agents+=init)*
		public Group getGroup_5() { return cGroup_5; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_5_0() { return cVerticalLineVerticalLineKeyword_5_0; }

		//agents+=init
		public Assignment getAgentsAssignment_5_1() { return cAgentsAssignment_5_1; }

		//init
		public RuleCall getAgentsInitParserRuleCall_5_1_0() { return cAgentsInitParserRuleCall_5_1_0; }

		//tran+=gl_tran+
		public Assignment getTranAssignment_6() { return cTranAssignment_6; }

		//gl_tran
		public RuleCall getTranGl_tranParserRuleCall_6_0() { return cTranGl_tranParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class InitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "init");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAgentRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAgentRefAgentCrossReference_0_0 = (CrossReference)cAgentRefAssignment_0.eContents().get(0);
		private final RuleCall cAgentRefAgentIDTerminalRuleCall_0_0_1 = (RuleCall)cAgentRefAgentCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesStateInitParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStatesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatesStateInitParserRuleCall_3_1_0 = (RuleCall)cStatesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//init:
		//	agentRef=[agent] "{" states+=stateInit ("," states+=stateInit)* "}";
		public ParserRule getRule() { return rule; }

		//agentRef=[agent] "{" states+=stateInit ("," states+=stateInit)* "}"
		public Group getGroup() { return cGroup; }

		//agentRef=[agent]
		public Assignment getAgentRefAssignment_0() { return cAgentRefAssignment_0; }

		//[agent]
		public CrossReference getAgentRefAgentCrossReference_0_0() { return cAgentRefAgentCrossReference_0_0; }

		//ID
		public RuleCall getAgentRefAgentIDTerminalRuleCall_0_0_1() { return cAgentRefAgentIDTerminalRuleCall_0_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//states+=stateInit
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }

		//stateInit
		public RuleCall getStatesStateInitParserRuleCall_2_0() { return cStatesStateInitParserRuleCall_2_0; }

		//("," states+=stateInit)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//states+=stateInit
		public Assignment getStatesAssignment_3_1() { return cStatesAssignment_3_1; }

		//stateInit
		public RuleCall getStatesStateInitParserRuleCall_3_1_0() { return cStatesStateInitParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StateInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "stateInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cStateRefStateCrossReference_0_0 = (CrossReference)cStateRefAssignment_0.eContents().get(0);
		private final RuleCall cStateRefStateIDTerminalRuleCall_0_0_1 = (RuleCall)cStateRefStateCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardINTTerminalRuleCall_2_0 = (RuleCall)cCardAssignment_2.eContents().get(0);
		
		//stateInit:
		//	stateRef=[state] "=" card=INT;
		public ParserRule getRule() { return rule; }

		//stateRef=[state] "=" card=INT
		public Group getGroup() { return cGroup; }

		//stateRef=[state]
		public Assignment getStateRefAssignment_0() { return cStateRefAssignment_0; }

		//[state]
		public CrossReference getStateRefStateCrossReference_0_0() { return cStateRefStateCrossReference_0_0; }

		//ID
		public RuleCall getStateRefStateIDTerminalRuleCall_0_0_1() { return cStateRefStateIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//card=INT
		public Assignment getCardAssignment_2() { return cCardAssignment_2; }

		//INT
		public RuleCall getCardINTTerminalRuleCall_2_0() { return cCardINTTerminalRuleCall_2_0; }
	}

	public class Gl_tranElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gl_tran");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLTranAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLTranLoc_tranParserRuleCall_3_0 = (RuleCall)cLTranAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAmpersandKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLTranAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLTranLoc_tranParserRuleCall_4_1_0 = (RuleCall)cLTranAssignment_4_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRateExprParserRuleCall_6_0 = (RuleCall)cRateAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//gl_tran:
		//	"transition" name=ID "{" lTran+=loc_tran ("&" lTran+=loc_tran)* "=>" rate=expr "}";
		public ParserRule getRule() { return rule; }

		//"transition" name=ID "{" lTran+=loc_tran ("&" lTran+=loc_tran)* "=>" rate=expr "}"
		public Group getGroup() { return cGroup; }

		//"transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//lTran+=loc_tran
		public Assignment getLTranAssignment_3() { return cLTranAssignment_3; }

		//loc_tran
		public RuleCall getLTranLoc_tranParserRuleCall_3_0() { return cLTranLoc_tranParserRuleCall_3_0; }

		//("&" lTran+=loc_tran)*
		public Group getGroup_4() { return cGroup_4; }

		//"&"
		public Keyword getAmpersandKeyword_4_0() { return cAmpersandKeyword_4_0; }

		//lTran+=loc_tran
		public Assignment getLTranAssignment_4_1() { return cLTranAssignment_4_1; }

		//loc_tran
		public RuleCall getLTranLoc_tranParserRuleCall_4_1_0() { return cLTranLoc_tranParserRuleCall_4_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignGreaterThanSignKeyword_5; }

		//rate=expr
		public Assignment getRateAssignment_6() { return cRateAssignment_6; }

		//expr
		public RuleCall getRateExprParserRuleCall_6_0() { return cRateExprParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class Loc_tranElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "loc_tran");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNewKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cStateRefAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cStateRefStateCrossReference_0_1_0 = (CrossReference)cStateRefAssignment_0_1.eContents().get(0);
		private final RuleCall cStateRefStateIDTerminalRuleCall_0_1_0_1 = (RuleCall)cStateRefStateCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cKillKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStateRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cStateRefStateCrossReference_1_1_0 = (CrossReference)cStateRefAssignment_1_1.eContents().get(0);
		private final RuleCall cStateRefStateIDTerminalRuleCall_1_1_0_1 = (RuleCall)cStateRefStateCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cSCondAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSCondState_condParserRuleCall_2_0_0 = (RuleCall)cSCondAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cACondAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cACondAction_condParserRuleCall_2_2_0 = (RuleCall)cACondAssignment_2_2.eContents().get(0);
		
		//loc_tran:
		//	"new" stateRef=[state] | "kill" stateRef=[state] | sCond=state_cond ":" aCond=action_cond;
		public ParserRule getRule() { return rule; }

		//"new" stateRef=[state] | "kill" stateRef=[state] | sCond=state_cond ":" aCond=action_cond
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new" stateRef=[state]
		public Group getGroup_0() { return cGroup_0; }

		//"new"
		public Keyword getNewKeyword_0_0() { return cNewKeyword_0_0; }

		//stateRef=[state]
		public Assignment getStateRefAssignment_0_1() { return cStateRefAssignment_0_1; }

		//[state]
		public CrossReference getStateRefStateCrossReference_0_1_0() { return cStateRefStateCrossReference_0_1_0; }

		//ID
		public RuleCall getStateRefStateIDTerminalRuleCall_0_1_0_1() { return cStateRefStateIDTerminalRuleCall_0_1_0_1; }

		//"kill" stateRef=[state]
		public Group getGroup_1() { return cGroup_1; }

		//"kill"
		public Keyword getKillKeyword_1_0() { return cKillKeyword_1_0; }

		//stateRef=[state]
		public Assignment getStateRefAssignment_1_1() { return cStateRefAssignment_1_1; }

		//[state]
		public CrossReference getStateRefStateCrossReference_1_1_0() { return cStateRefStateCrossReference_1_1_0; }

		//ID
		public RuleCall getStateRefStateIDTerminalRuleCall_1_1_0_1() { return cStateRefStateIDTerminalRuleCall_1_1_0_1; }

		//sCond=state_cond ":" aCond=action_cond
		public Group getGroup_2() { return cGroup_2; }

		//sCond=state_cond
		public Assignment getSCondAssignment_2_0() { return cSCondAssignment_2_0; }

		//state_cond
		public RuleCall getSCondState_condParserRuleCall_2_0_0() { return cSCondState_condParserRuleCall_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//aCond=action_cond
		public Assignment getACondAssignment_2_2() { return cACondAssignment_2_2; }

		//action_cond
		public RuleCall getACondAction_condParserRuleCall_2_2_0() { return cACondAction_condParserRuleCall_2_2_0; }
	}

	public class State_condElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "state_cond");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAnystateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAnyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStateRefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStateRefState_refParserRuleCall_1_0_0 = (RuleCall)cStateRefAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cOrKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cStateRefAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStateRefState_refParserRuleCall_1_1_1_0 = (RuleCall)cStateRefAssignment_1_1_1.eContents().get(0);
		
		//state_cond:
		//	{anystate} "any" | // stateRef= state_ref
		//	stateRef+=state_ref ("or" stateRef+=state_ref)*;
		public ParserRule getRule() { return rule; }

		//{anystate} "any" | // stateRef= state_ref
		//stateRef+=state_ref ("or" stateRef+=state_ref)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//{anystate} "any"
		public Group getGroup_0() { return cGroup_0; }

		//{anystate}
		public Action getAnystateAction_0_0() { return cAnystateAction_0_0; }

		//"any"
		public Keyword getAnyKeyword_0_1() { return cAnyKeyword_0_1; }

		//// stateRef= state_ref
		//stateRef+=state_ref ("or" stateRef+=state_ref)*
		public Group getGroup_1() { return cGroup_1; }

		//// stateRef= state_ref
		//stateRef+=state_ref
		public Assignment getStateRefAssignment_1_0() { return cStateRefAssignment_1_0; }

		//state_ref
		public RuleCall getStateRefState_refParserRuleCall_1_0_0() { return cStateRefState_refParserRuleCall_1_0_0; }

		//("or" stateRef+=state_ref)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"or"
		public Keyword getOrKeyword_1_1_0() { return cOrKeyword_1_1_0; }

		//stateRef+=state_ref
		public Assignment getStateRefAssignment_1_1_1() { return cStateRefAssignment_1_1_1; }

		//state_ref
		public RuleCall getStateRefState_refParserRuleCall_1_1_1_0() { return cStateRefState_refParserRuleCall_1_1_1_0; }
	}

	public class State_refElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "state_ref");
		private final Assignment cStateRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cStateRefStateCrossReference_0 = (CrossReference)cStateRefAssignment.eContents().get(0);
		private final RuleCall cStateRefStateIDTerminalRuleCall_0_1 = (RuleCall)cStateRefStateCrossReference_0.eContents().get(1);
		
		//state_ref:
		//	stateRef=[state];
		public ParserRule getRule() { return rule; }

		//stateRef=[state]
		public Assignment getStateRefAssignment() { return cStateRefAssignment; }

		//[state]
		public CrossReference getStateRefStateCrossReference_0() { return cStateRefStateCrossReference_0; }

		//ID
		public RuleCall getStateRefStateIDTerminalRuleCall_0_1() { return cStateRefStateIDTerminalRuleCall_0_1; }
	}

	public class Action_condElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "action_cond");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAnystateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAnyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cActionRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cActionRefLabelCrossReference_1_0 = (CrossReference)cActionRefAssignment_1.eContents().get(0);
		private final RuleCall cActionRefLabelIDTerminalRuleCall_1_0_1 = (RuleCall)cActionRefLabelCrossReference_1_0.eContents().get(1);
		
		//action_cond:
		//	{anystate} "any" | actionRef=[label];
		public ParserRule getRule() { return rule; }

		//{anystate} "any" | actionRef=[label]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{anystate} "any"
		public Group getGroup_0() { return cGroup_0; }

		//{anystate}
		public Action getAnystateAction_0_0() { return cAnystateAction_0_0; }

		//"any"
		public Keyword getAnyKeyword_0_1() { return cAnyKeyword_0_1; }

		//actionRef=[label]
		public Assignment getActionRefAssignment_1() { return cActionRefAssignment_1; }

		//[label]
		public CrossReference getActionRefLabelCrossReference_1_0() { return cActionRefLabelCrossReference_1_0; }

		//ID
		public RuleCall getActionRefLabelIDTerminalRuleCall_1_0_1() { return cActionRefLabelIDTerminalRuleCall_1_0_1; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cConstRefConstantCrossReference_0_0 = (CrossReference)cConstRefAssignment_0.eContents().get(0);
		private final RuleCall cConstRefConstantIDTerminalRuleCall_0_0_1 = (RuleCall)cConstRefConstantCrossReference_0_0.eContents().get(1);
		private final Assignment cConstFLOATAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstFLOATFLOATTerminalRuleCall_1_0 = (RuleCall)cConstFLOATAssignment_1.eContents().get(0);
		private final Assignment cConstINTAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConstINTINTTerminalRuleCall_2_0 = (RuleCall)cConstINTAssignment_2.eContents().get(0);
		
		////{stateExpr} stateRef=[state]	
		//expr:
		//	constRef=[constant] | constFLOAT=FLOAT | constINT=INT;
		public ParserRule getRule() { return rule; }

		//constRef=[constant] | constFLOAT=FLOAT | constINT=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//constRef=[constant]
		public Assignment getConstRefAssignment_0() { return cConstRefAssignment_0; }

		//[constant]
		public CrossReference getConstRefConstantCrossReference_0_0() { return cConstRefConstantCrossReference_0_0; }

		//ID
		public RuleCall getConstRefConstantIDTerminalRuleCall_0_0_1() { return cConstRefConstantIDTerminalRuleCall_0_0_1; }

		//constFLOAT=FLOAT
		public Assignment getConstFLOATAssignment_1() { return cConstFLOATAssignment_1; }

		//FLOAT
		public RuleCall getConstFLOATFLOATTerminalRuleCall_1_0() { return cConstFLOATFLOATTerminalRuleCall_1_0; }

		//constINT=INT
		public Assignment getConstINTAssignment_2() { return cConstINTAssignment_2; }

		//INT
		public RuleCall getConstINTINTTerminalRuleCall_2_0() { return cConstINTINTTerminalRuleCall_2_0; }
	}
	
	
	private final MainElements pMain;
	private final ConstantElements pConstant;
	private final AgentElements pAgent;
	private final LabelElements pLabel;
	private final StateElements pState;
	private final ActionElements pAction;
	private final Local_rateElements pLocal_rate;
	private final PopulationElements pPopulation;
	private final InitElements pInit;
	private final StateInitElements pStateInit;
	private final Gl_tranElements pGl_tran;
	private final Loc_tranElements pLoc_tran;
	private final State_condElements pState_cond;
	private final State_refElements pState_ref;
	private final Action_condElements pAction_cond;
	private final ExprElements pExpr;
	private final TerminalRule tINT;
	private final TerminalRule tFLOAT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MarkovPopulationModelsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMain = new MainElements();
		this.pConstant = new ConstantElements();
		this.pAgent = new AgentElements();
		this.pLabel = new LabelElements();
		this.pState = new StateElements();
		this.pAction = new ActionElements();
		this.pLocal_rate = new Local_rateElements();
		this.pPopulation = new PopulationElements();
		this.pInit = new InitElements();
		this.pStateInit = new StateInitElements();
		this.pGl_tran = new Gl_tranElements();
		this.pLoc_tran = new Loc_tranElements();
		this.pState_cond = new State_condElements();
		this.pState_ref = new State_refElements();
		this.pAction_cond = new Action_condElements();
		this.pExpr = new ExprElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("imt.simhya.language.MarkovPopulationModels".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////extension
	//main:
	//	constDef+=constant* & populationDef=population & agentDef=agent;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}

	//constant:
	//	"const integer" name=ID "=" constINT=INT | "const real" name=ID "=" constFLOAT=FLOAT;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//agent:
	//	"agent" name=ID "{" "actions" act+=label+ s+=state+ "}";
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}

	//label:
	//	name=ID;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//state:
	//	"state" name=ID "{" spontaneousAct+=action+ "}";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//// TODO guards
	//action:
	//	actRef=[label] "-->" stateRef=[state] ":" localRate=local_rate;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//local_rate:
	//	constRef=[constant] | localRate=FLOAT;
	public Local_rateElements getLocal_rateAccess() {
		return pLocal_rate;
	}
	
	public ParserRule getLocal_rateRule() {
		return getLocal_rateAccess().getRule();
	}

	//population:
	//	"population" name=ID "{" "init" agents+=init ("||" agents+=init)* tran+=gl_tran+ "}";
	public PopulationElements getPopulationAccess() {
		return pPopulation;
	}
	
	public ParserRule getPopulationRule() {
		return getPopulationAccess().getRule();
	}

	//init:
	//	agentRef=[agent] "{" states+=stateInit ("," states+=stateInit)* "}";
	public InitElements getInitAccess() {
		return pInit;
	}
	
	public ParserRule getInitRule() {
		return getInitAccess().getRule();
	}

	//stateInit:
	//	stateRef=[state] "=" card=INT;
	public StateInitElements getStateInitAccess() {
		return pStateInit;
	}
	
	public ParserRule getStateInitRule() {
		return getStateInitAccess().getRule();
	}

	//gl_tran:
	//	"transition" name=ID "{" lTran+=loc_tran ("&" lTran+=loc_tran)* "=>" rate=expr "}";
	public Gl_tranElements getGl_tranAccess() {
		return pGl_tran;
	}
	
	public ParserRule getGl_tranRule() {
		return getGl_tranAccess().getRule();
	}

	//loc_tran:
	//	"new" stateRef=[state] | "kill" stateRef=[state] | sCond=state_cond ":" aCond=action_cond;
	public Loc_tranElements getLoc_tranAccess() {
		return pLoc_tran;
	}
	
	public ParserRule getLoc_tranRule() {
		return getLoc_tranAccess().getRule();
	}

	//state_cond:
	//	{anystate} "any" | // stateRef= state_ref
	//	stateRef+=state_ref ("or" stateRef+=state_ref)*;
	public State_condElements getState_condAccess() {
		return pState_cond;
	}
	
	public ParserRule getState_condRule() {
		return getState_condAccess().getRule();
	}

	//state_ref:
	//	stateRef=[state];
	public State_refElements getState_refAccess() {
		return pState_ref;
	}
	
	public ParserRule getState_refRule() {
		return getState_refAccess().getRule();
	}

	//action_cond:
	//	{anystate} "any" | actionRef=[label];
	public Action_condElements getAction_condAccess() {
		return pAction_cond;
	}
	
	public ParserRule getAction_condRule() {
		return getAction_condAccess().getRule();
	}

	////{stateExpr} stateRef=[state]	
	//expr:
	//	constRef=[constant] | constFLOAT=FLOAT | constINT=INT;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	////  ('-')? (INT)* ('.' (INT)+)? |
	////  ('-')? (INT)+ ('.') | 
	////  ('-')? (INT)+ ('.' (INT)*)? (('e'|'E')('-'|'+')? (INT)+); terminal FLOAT returns ecore::EDouble:
	//	"-"? INT "." INT;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
