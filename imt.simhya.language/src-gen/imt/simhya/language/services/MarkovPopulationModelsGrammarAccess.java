/*
* generated by Xtext
*/
package imt.simhya.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MarkovPopulationModelsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "main");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cConstDefAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cConstDefConstantParserRuleCall_0_0 = (RuleCall)cConstDefAssignment_0.eContents().get(0);
		private final Assignment cLocationDefAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cLocationDefLocationParserRuleCall_1_0 = (RuleCall)cLocationDefAssignment_1.eContents().get(0);
		private final Assignment cAgentDefAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cAgentDefAgentParserRuleCall_2_0 = (RuleCall)cAgentDefAssignment_2.eContents().get(0);
		private final Assignment cPopulationDefAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cPopulationDefPopulationParserRuleCall_3_0 = (RuleCall)cPopulationDefAssignment_3.eContents().get(0);
		
		////extension
		//main:
		//	constDef+=constant* & locationDef=location? & agentDef+=agent+ & populationDef+=population+;
		public ParserRule getRule() { return rule; }

		//constDef+=constant* & locationDef=location? & agentDef+=agent+ & populationDef+=population+
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//constDef+=constant*
		public Assignment getConstDefAssignment_0() { return cConstDefAssignment_0; }

		//constant
		public RuleCall getConstDefConstantParserRuleCall_0_0() { return cConstDefConstantParserRuleCall_0_0; }

		//locationDef=location?
		public Assignment getLocationDefAssignment_1() { return cLocationDefAssignment_1; }

		//location
		public RuleCall getLocationDefLocationParserRuleCall_1_0() { return cLocationDefLocationParserRuleCall_1_0; }

		//agentDef+=agent+
		public Assignment getAgentDefAssignment_2() { return cAgentDefAssignment_2; }

		//agent
		public RuleCall getAgentDefAgentParserRuleCall_2_0() { return cAgentDefAgentParserRuleCall_2_0; }

		//populationDef+=population+
		public Assignment getPopulationDefAssignment_3() { return cPopulationDefAssignment_3; }

		//population
		public RuleCall getPopulationDefPopulationParserRuleCall_3_0() { return cPopulationDefPopulationParserRuleCall_3_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cConstIntegerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConstINTAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cConstINTINTTerminalRuleCall_0_3_0 = (RuleCall)cConstINTAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cConstRealKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cConstFLOATAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cConstFLOATFLOATTerminalRuleCall_1_3_0 = (RuleCall)cConstFLOATAssignment_1_3.eContents().get(0);
		
		//constant:
		//	"const integer" name=ID "=" constINT=INT | "const real" name=ID "=" constFLOAT=FLOAT;
		public ParserRule getRule() { return rule; }

		//"const integer" name=ID "=" constINT=INT | "const real" name=ID "=" constFLOAT=FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"const integer" name=ID "=" constINT=INT
		public Group getGroup_0() { return cGroup_0; }

		//"const integer"
		public Keyword getConstIntegerKeyword_0_0() { return cConstIntegerKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//constINT=INT
		public Assignment getConstINTAssignment_0_3() { return cConstINTAssignment_0_3; }

		//INT
		public RuleCall getConstINTINTTerminalRuleCall_0_3_0() { return cConstINTINTTerminalRuleCall_0_3_0; }

		//"const real" name=ID "=" constFLOAT=FLOAT
		public Group getGroup_1() { return cGroup_1; }

		//"const real"
		public Keyword getConstRealKeyword_1_0() { return cConstRealKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//constFLOAT=FLOAT
		public Assignment getConstFLOATAssignment_1_3() { return cConstFLOATAssignment_1_3; }

		//FLOAT
		public RuleCall getConstFLOATFLOATTerminalRuleCall_1_3_0() { return cConstFLOATFLOATTerminalRuleCall_1_3_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cConstRefConstantCrossReference_0_0 = (CrossReference)cConstRefAssignment_0.eContents().get(0);
		private final RuleCall cConstRefConstantIDTerminalRuleCall_0_0_1 = (RuleCall)cConstRefConstantCrossReference_0_0.eContents().get(1);
		private final Assignment cConstFLOATAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstFLOATFLOATTerminalRuleCall_1_0 = (RuleCall)cConstFLOATAssignment_1.eContents().get(0);
		private final Assignment cConstINTAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConstINTINTTerminalRuleCall_2_0 = (RuleCall)cConstINTAssignment_2.eContents().get(0);
		
		////stateRef=[state]	
		//expr:
		//	constRef=[constant] | constFLOAT=FLOAT | constINT=INT;
		public ParserRule getRule() { return rule; }

		//constRef=[constant] | constFLOAT=FLOAT | constINT=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//constRef=[constant]
		public Assignment getConstRefAssignment_0() { return cConstRefAssignment_0; }

		//[constant]
		public CrossReference getConstRefConstantCrossReference_0_0() { return cConstRefConstantCrossReference_0_0; }

		//ID
		public RuleCall getConstRefConstantIDTerminalRuleCall_0_0_1() { return cConstRefConstantIDTerminalRuleCall_0_0_1; }

		//constFLOAT=FLOAT
		public Assignment getConstFLOATAssignment_1() { return cConstFLOATAssignment_1; }

		//FLOAT
		public RuleCall getConstFLOATFLOATTerminalRuleCall_1_0() { return cConstFLOATFLOATTerminalRuleCall_1_0; }

		//constINT=INT
		public Assignment getConstINTAssignment_2() { return cConstINTAssignment_2; }

		//INT
		public RuleCall getConstINTINTTerminalRuleCall_2_0() { return cConstINTINTTerminalRuleCall_2_0; }
	}

	public class ParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "params");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsIDTerminalRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsIDTerminalRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//params:
		//	"[" params+=ID ("," params+=ID)* "]";
		public ParserRule getRule() { return rule; }

		//"[" params+=ID ("," params+=ID)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//params+=ID
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//ID
		public RuleCall getParamsIDTerminalRuleCall_1_0() { return cParamsIDTerminalRuleCall_1_0; }

		//("," params+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//params+=ID
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//ID
		public RuleCall getParamsIDTerminalRuleCall_2_1_0() { return cParamsIDTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class Actual_parametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "actual_parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActualParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActualParamsExprParserRuleCall_1_0 = (RuleCall)cActualParamsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActualParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActualParamsExprParserRuleCall_2_1_0 = (RuleCall)cActualParamsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//actual_parameters:
		//	"[" actualParams+=expr ("," actualParams+=expr)* "]";
		public ParserRule getRule() { return rule; }

		//"[" actualParams+=expr ("," actualParams+=expr)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//actualParams+=expr
		public Assignment getActualParamsAssignment_1() { return cActualParamsAssignment_1; }

		//expr
		public RuleCall getActualParamsExprParserRuleCall_1_0() { return cActualParamsExprParserRuleCall_1_0; }

		//("," actualParams+=expr)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//actualParams+=expr
		public Assignment getActualParamsAssignment_2_1() { return cActualParamsAssignment_2_1; }

		//expr
		public RuleCall getActualParamsExprParserRuleCall_2_1_0() { return cActualParamsExprParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "location");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParamListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamListParamsParserRuleCall_2_0 = (RuleCall)cParamListAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cActionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActLabelParserRuleCall_5_0 = (RuleCall)cActAssignment_5.eContents().get(0);
		private final Assignment cSAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSStateParserRuleCall_6_0 = (RuleCall)cSAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//location:
		//	"location" name=ID paramList=params? "{" "actions" act+=label+ s+=state+ "}";
		public ParserRule getRule() { return rule; }

		//"location" name=ID paramList=params? "{" "actions" act+=label+ s+=state+ "}"
		public Group getGroup() { return cGroup; }

		//"location"
		public Keyword getLocationKeyword_0() { return cLocationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//paramList=params?
		public Assignment getParamListAssignment_2() { return cParamListAssignment_2; }

		//params
		public RuleCall getParamListParamsParserRuleCall_2_0() { return cParamListParamsParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"actions"
		public Keyword getActionsKeyword_4() { return cActionsKeyword_4; }

		//act+=label+
		public Assignment getActAssignment_5() { return cActAssignment_5; }

		//label
		public RuleCall getActLabelParserRuleCall_5_0() { return cActLabelParserRuleCall_5_0; }

		//s+=state+
		public Assignment getSAssignment_6() { return cSAssignment_6; }

		//state
		public RuleCall getSStateParserRuleCall_6_0() { return cSStateParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParamListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamListParamsParserRuleCall_2_0 = (RuleCall)cParamListAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cActionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActLabelParserRuleCall_5_0 = (RuleCall)cActAssignment_5.eContents().get(0);
		private final Assignment cSAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSStateParserRuleCall_6_0 = (RuleCall)cSAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//agent:
		//	"agent" name=ID paramList=params? "{" "actions" act+=label+ s+=state+ "}";
		public ParserRule getRule() { return rule; }

		//"agent" name=ID paramList=params? "{" "actions" act+=label+ s+=state+ "}"
		public Group getGroup() { return cGroup; }

		//"agent"
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//paramList=params?
		public Assignment getParamListAssignment_2() { return cParamListAssignment_2; }

		//params
		public RuleCall getParamListParamsParserRuleCall_2_0() { return cParamListParamsParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"actions"
		public Keyword getActionsKeyword_4() { return cActionsKeyword_4; }

		//act+=label+
		public Assignment getActAssignment_5() { return cActAssignment_5; }

		//label
		public RuleCall getActLabelParserRuleCall_5_0() { return cActLabelParserRuleCall_5_0; }

		//s+=state+
		public Assignment getSAssignment_6() { return cSAssignment_6; }

		//state
		public RuleCall getSStateParserRuleCall_6_0() { return cSStateParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "label");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//label:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "state");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParamListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamListParamsParserRuleCall_2_0 = (RuleCall)cParamListAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSpontaneousActAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSpontaneousActActionParserRuleCall_4_0 = (RuleCall)cSpontaneousActAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//state:
		//	"state" name=ID paramList=params? "{" spontaneousAct+=action+ "}";
		public ParserRule getRule() { return rule; }

		//"state" name=ID paramList=params? "{" spontaneousAct+=action+ "}"
		public Group getGroup() { return cGroup; }

		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//paramList=params?
		public Assignment getParamListAssignment_2() { return cParamListAssignment_2; }

		//params
		public RuleCall getParamListParamsParserRuleCall_2_0() { return cParamListParamsParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//spontaneousAct+=action+
		public Assignment getSpontaneousActAssignment_4() { return cSpontaneousActAssignment_4; }

		//action
		public RuleCall getSpontaneousActActionParserRuleCall_4_0() { return cSpontaneousActActionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActRefLabelCrossReference_0_0 = (CrossReference)cActRefAssignment_0.eContents().get(0);
		private final RuleCall cActRefLabelIDTerminalRuleCall_0_0_1 = (RuleCall)cActRefLabelCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateRefStateCrossReference_2_0 = (CrossReference)cStateRefAssignment_2.eContents().get(0);
		private final RuleCall cStateRefStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateRefStateCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsExprovaParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParamsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParamsExprovaParserRuleCall_3_2_1_0 = (RuleCall)cParamsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLocalRateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLocalRateExprParserRuleCall_5_0 = (RuleCall)cLocalRateAssignment_5.eContents().get(0);
		
		//// TODO guards
		//// no state[params] but state[param_expr]
		//action:
		//	actRef=[label] "-->" stateRef=[state] ("[" params+=exprova ("," params+=exprova)* "]")? ":" localRate=expr;
		public ParserRule getRule() { return rule; }

		//actRef=[label] "-->" stateRef=[state] ("[" params+=exprova ("," params+=exprova)* "]")? ":" localRate=expr
		public Group getGroup() { return cGroup; }

		//actRef=[label]
		public Assignment getActRefAssignment_0() { return cActRefAssignment_0; }

		//[label]
		public CrossReference getActRefLabelCrossReference_0_0() { return cActRefLabelCrossReference_0_0; }

		//ID
		public RuleCall getActRefLabelIDTerminalRuleCall_0_0_1() { return cActRefLabelIDTerminalRuleCall_0_0_1; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1; }

		//stateRef=[state]
		public Assignment getStateRefAssignment_2() { return cStateRefAssignment_2; }

		//[state]
		public CrossReference getStateRefStateCrossReference_2_0() { return cStateRefStateCrossReference_2_0; }

		//ID
		public RuleCall getStateRefStateIDTerminalRuleCall_2_0_1() { return cStateRefStateIDTerminalRuleCall_2_0_1; }

		//("[" params+=exprova ("," params+=exprova)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//params+=exprova
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }

		//exprova
		public RuleCall getParamsExprovaParserRuleCall_3_1_0() { return cParamsExprovaParserRuleCall_3_1_0; }

		//("," params+=exprova)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//params+=exprova
		public Assignment getParamsAssignment_3_2_1() { return cParamsAssignment_3_2_1; }

		//exprova
		public RuleCall getParamsExprovaParserRuleCall_3_2_1_0() { return cParamsExprovaParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//localRate=expr
		public Assignment getLocalRateAssignment_5() { return cLocalRateAssignment_5; }

		//expr
		public RuleCall getLocalRateExprParserRuleCall_5_0() { return cLocalRateExprParserRuleCall_5_0; }
	}

	public class ExprovaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "exprova");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprIDTerminalRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprIDTerminalRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNumAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNumINTTerminalRuleCall_1_2_0 = (RuleCall)cNumAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cExprAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprIDTerminalRuleCall_2_0_0 = (RuleCall)cExprAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNumAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNumINTTerminalRuleCall_2_2_0 = (RuleCall)cNumAssignment_2_2.eContents().get(0);
		private final Assignment cNumAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNumINTTerminalRuleCall_3_0 = (RuleCall)cNumAssignment_3.eContents().get(0);
		
		//exprova:
		//	expr=ID | expr=ID "+" num=INT | expr=ID "-" num=INT | num=INT;
		public ParserRule getRule() { return rule; }

		//expr=ID | expr=ID "+" num=INT | expr=ID "-" num=INT | num=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//expr=ID
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//ID
		public RuleCall getExprIDTerminalRuleCall_0_0() { return cExprIDTerminalRuleCall_0_0; }

		//expr=ID "+" num=INT
		public Group getGroup_1() { return cGroup_1; }

		//expr=ID
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }

		//ID
		public RuleCall getExprIDTerminalRuleCall_1_0_0() { return cExprIDTerminalRuleCall_1_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//num=INT
		public Assignment getNumAssignment_1_2() { return cNumAssignment_1_2; }

		//INT
		public RuleCall getNumINTTerminalRuleCall_1_2_0() { return cNumINTTerminalRuleCall_1_2_0; }

		//expr=ID "-" num=INT
		public Group getGroup_2() { return cGroup_2; }

		//expr=ID
		public Assignment getExprAssignment_2_0() { return cExprAssignment_2_0; }

		//ID
		public RuleCall getExprIDTerminalRuleCall_2_0_0() { return cExprIDTerminalRuleCall_2_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }

		//num=INT
		public Assignment getNumAssignment_2_2() { return cNumAssignment_2_2; }

		//INT
		public RuleCall getNumINTTerminalRuleCall_2_2_0() { return cNumINTTerminalRuleCall_2_2_0; }

		//num=INT
		public Assignment getNumAssignment_3() { return cNumAssignment_3; }

		//INT
		public RuleCall getNumINTTerminalRuleCall_3_0() { return cNumINTTerminalRuleCall_3_0; }
	}

	public class PopulationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "population");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPopulationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParamListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamListParamsParserRuleCall_2_0 = (RuleCall)cParamListAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cInitKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAgentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAgentsInitParserRuleCall_5_0 = (RuleCall)cAgentsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVerticalLineVerticalLineKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cAgentsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cAgentsInitParserRuleCall_6_1_0 = (RuleCall)cAgentsAssignment_6_1.eContents().get(0);
		private final Assignment cTranAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTranGl_tranParserRuleCall_7_0 = (RuleCall)cTranAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//population:
		//	"population" name=ID paramList=params? "{" "init" agents+=init ("||" agents+=init)* tran+=gl_tran+ "}";
		public ParserRule getRule() { return rule; }

		//"population" name=ID paramList=params? "{" "init" agents+=init ("||" agents+=init)* tran+=gl_tran+ "}"
		public Group getGroup() { return cGroup; }

		//"population"
		public Keyword getPopulationKeyword_0() { return cPopulationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//paramList=params?
		public Assignment getParamListAssignment_2() { return cParamListAssignment_2; }

		//params
		public RuleCall getParamListParamsParserRuleCall_2_0() { return cParamListParamsParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"init"
		public Keyword getInitKeyword_4() { return cInitKeyword_4; }

		//agents+=init
		public Assignment getAgentsAssignment_5() { return cAgentsAssignment_5; }

		//init
		public RuleCall getAgentsInitParserRuleCall_5_0() { return cAgentsInitParserRuleCall_5_0; }

		//("||" agents+=init)*
		public Group getGroup_6() { return cGroup_6; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_6_0() { return cVerticalLineVerticalLineKeyword_6_0; }

		//agents+=init
		public Assignment getAgentsAssignment_6_1() { return cAgentsAssignment_6_1; }

		//init
		public RuleCall getAgentsInitParserRuleCall_6_1_0() { return cAgentsInitParserRuleCall_6_1_0; }

		//tran+=gl_tran+
		public Assignment getTranAssignment_7() { return cTranAssignment_7; }

		//gl_tran
		public RuleCall getTranGl_tranParserRuleCall_7_0() { return cTranGl_tranParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class InitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "init");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAgentRefAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cAgentRefAgentCrossReference_0_0_0 = (CrossReference)cAgentRefAssignment_0_0.eContents().get(0);
		private final RuleCall cAgentRefAgentIDTerminalRuleCall_0_0_0_1 = (RuleCall)cAgentRefAgentCrossReference_0_0_0.eContents().get(1);
		private final Assignment cActualParametersAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cActualParametersActual_parametersParserRuleCall_0_1_0 = (RuleCall)cActualParametersAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cStatesAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cStatesStateInitParserRuleCall_0_3_0 = (RuleCall)cStatesAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cStatesAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cStatesStateInitParserRuleCall_0_4_1_0 = (RuleCall)cStatesAssignment_0_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cInKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cLocRefAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final CrossReference cLocRefLocationCrossReference_0_6_1_0 = (CrossReference)cLocRefAssignment_0_6_1.eContents().get(0);
		private final RuleCall cLocRefLocationIDTerminalRuleCall_0_6_1_0_1 = (RuleCall)cLocRefLocationCrossReference_0_6_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPopRefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cPopRefPopulationCrossReference_1_0_0 = (CrossReference)cPopRefAssignment_1_0.eContents().get(0);
		private final RuleCall cPopRefPopulationIDTerminalRuleCall_1_0_0_1 = (RuleCall)cPopRefPopulationCrossReference_1_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCardAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCardExprParserRuleCall_1_2_0 = (RuleCall)cCardAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cInKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cLocRefAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final CrossReference cLocRefLocationCrossReference_1_4_1_0 = (CrossReference)cLocRefAssignment_1_4_1.eContents().get(0);
		private final RuleCall cLocRefLocationIDTerminalRuleCall_1_4_1_0_1 = (RuleCall)cLocRefLocationCrossReference_1_4_1_0.eContents().get(1);
		
		//init:
		//	agentRef=[agent] actualParameters=actual_parameters? "{" states+=stateInit ("," states+=stateInit)* "}" ("in"
		//	locRef=[location])? | popRef=[population] "{" card=expr "}" ("in" locRef=[location])?;
		public ParserRule getRule() { return rule; }

		//agentRef=[agent] actualParameters=actual_parameters? "{" states+=stateInit ("," states+=stateInit)* "}" ("in"
		//locRef=[location])? | popRef=[population] "{" card=expr "}" ("in" locRef=[location])?
		public Alternatives getAlternatives() { return cAlternatives; }

		//agentRef=[agent] actualParameters=actual_parameters? "{" states+=stateInit ("," states+=stateInit)* "}" ("in"
		//locRef=[location])?
		public Group getGroup_0() { return cGroup_0; }

		//agentRef=[agent]
		public Assignment getAgentRefAssignment_0_0() { return cAgentRefAssignment_0_0; }

		//[agent]
		public CrossReference getAgentRefAgentCrossReference_0_0_0() { return cAgentRefAgentCrossReference_0_0_0; }

		//ID
		public RuleCall getAgentRefAgentIDTerminalRuleCall_0_0_0_1() { return cAgentRefAgentIDTerminalRuleCall_0_0_0_1; }

		//actualParameters=actual_parameters?
		public Assignment getActualParametersAssignment_0_1() { return cActualParametersAssignment_0_1; }

		//actual_parameters
		public RuleCall getActualParametersActual_parametersParserRuleCall_0_1_0() { return cActualParametersActual_parametersParserRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//states+=stateInit
		public Assignment getStatesAssignment_0_3() { return cStatesAssignment_0_3; }

		//stateInit
		public RuleCall getStatesStateInitParserRuleCall_0_3_0() { return cStatesStateInitParserRuleCall_0_3_0; }

		//("," states+=stateInit)*
		public Group getGroup_0_4() { return cGroup_0_4; }

		//","
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//states+=stateInit
		public Assignment getStatesAssignment_0_4_1() { return cStatesAssignment_0_4_1; }

		//stateInit
		public RuleCall getStatesStateInitParserRuleCall_0_4_1_0() { return cStatesStateInitParserRuleCall_0_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_5() { return cRightCurlyBracketKeyword_0_5; }

		//("in" locRef=[location])?
		public Group getGroup_0_6() { return cGroup_0_6; }

		//"in"
		public Keyword getInKeyword_0_6_0() { return cInKeyword_0_6_0; }

		//locRef=[location]
		public Assignment getLocRefAssignment_0_6_1() { return cLocRefAssignment_0_6_1; }

		//[location]
		public CrossReference getLocRefLocationCrossReference_0_6_1_0() { return cLocRefLocationCrossReference_0_6_1_0; }

		//ID
		public RuleCall getLocRefLocationIDTerminalRuleCall_0_6_1_0_1() { return cLocRefLocationIDTerminalRuleCall_0_6_1_0_1; }

		//popRef=[population] "{" card=expr "}" ("in" locRef=[location])?
		public Group getGroup_1() { return cGroup_1; }

		//popRef=[population]
		public Assignment getPopRefAssignment_1_0() { return cPopRefAssignment_1_0; }

		//[population]
		public CrossReference getPopRefPopulationCrossReference_1_0_0() { return cPopRefPopulationCrossReference_1_0_0; }

		//ID
		public RuleCall getPopRefPopulationIDTerminalRuleCall_1_0_0_1() { return cPopRefPopulationIDTerminalRuleCall_1_0_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//card=expr
		public Assignment getCardAssignment_1_2() { return cCardAssignment_1_2; }

		//expr
		public RuleCall getCardExprParserRuleCall_1_2_0() { return cCardExprParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }

		//("in" locRef=[location])?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"in"
		public Keyword getInKeyword_1_4_0() { return cInKeyword_1_4_0; }

		//locRef=[location]
		public Assignment getLocRefAssignment_1_4_1() { return cLocRefAssignment_1_4_1; }

		//[location]
		public CrossReference getLocRefLocationCrossReference_1_4_1_0() { return cLocRefLocationCrossReference_1_4_1_0; }

		//ID
		public RuleCall getLocRefLocationIDTerminalRuleCall_1_4_1_0_1() { return cLocRefLocationIDTerminalRuleCall_1_4_1_0_1; }
	}

	public class StateInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "stateInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStateRefState_refParserRuleCall_0_0 = (RuleCall)cStateRefAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardExprParserRuleCall_2_0 = (RuleCall)cCardAssignment_2.eContents().get(0);
		
		//stateInit:
		//	stateRef=state_ref "=" card=expr;
		public ParserRule getRule() { return rule; }

		//stateRef=state_ref "=" card=expr
		public Group getGroup() { return cGroup; }

		//stateRef=state_ref
		public Assignment getStateRefAssignment_0() { return cStateRefAssignment_0; }

		//state_ref
		public RuleCall getStateRefState_refParserRuleCall_0_0() { return cStateRefState_refParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//card=expr
		public Assignment getCardAssignment_2() { return cCardAssignment_2; }

		//expr
		public RuleCall getCardExprParserRuleCall_2_0() { return cCardExprParserRuleCall_2_0; }
	}

	public class Gl_tranElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gl_tran");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGeneratorsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGeneratorsGeneratorParserRuleCall_2_1_0 = (RuleCall)cGeneratorsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cGeneratorsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cGeneratorsGeneratorParserRuleCall_2_2_1_0 = (RuleCall)cGeneratorsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLTranAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLTranLoc_tranParserRuleCall_4_0 = (RuleCall)cLTranAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAmpersandKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLTranAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLTranLoc_tranParserRuleCall_5_1_0 = (RuleCall)cLTranAssignment_5_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRateExprParserRuleCall_7_0 = (RuleCall)cRateAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//gl_tran:
		//	"transition" name=ID ("[" generators+=generator (";" generators+=generator)* "]")? "{" lTran+=loc_tran ("&"
		//	lTran+=loc_tran)* "=>" rate=expr "}";
		public ParserRule getRule() { return rule; }

		//"transition" name=ID ("[" generators+=generator (";" generators+=generator)* "]")? "{" lTran+=loc_tran ("&"
		//lTran+=loc_tran)* "=>" rate=expr "}"
		public Group getGroup() { return cGroup; }

		//"transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("[" generators+=generator (";" generators+=generator)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//generators+=generator
		public Assignment getGeneratorsAssignment_2_1() { return cGeneratorsAssignment_2_1; }

		//generator
		public RuleCall getGeneratorsGeneratorParserRuleCall_2_1_0() { return cGeneratorsGeneratorParserRuleCall_2_1_0; }

		//(";" generators+=generator)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//";"
		public Keyword getSemicolonKeyword_2_2_0() { return cSemicolonKeyword_2_2_0; }

		//generators+=generator
		public Assignment getGeneratorsAssignment_2_2_1() { return cGeneratorsAssignment_2_2_1; }

		//generator
		public RuleCall getGeneratorsGeneratorParserRuleCall_2_2_1_0() { return cGeneratorsGeneratorParserRuleCall_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//lTran+=loc_tran
		public Assignment getLTranAssignment_4() { return cLTranAssignment_4; }

		//loc_tran
		public RuleCall getLTranLoc_tranParserRuleCall_4_0() { return cLTranLoc_tranParserRuleCall_4_0; }

		//("&" lTran+=loc_tran)*
		public Group getGroup_5() { return cGroup_5; }

		//"&"
		public Keyword getAmpersandKeyword_5_0() { return cAmpersandKeyword_5_0; }

		//lTran+=loc_tran
		public Assignment getLTranAssignment_5_1() { return cLTranAssignment_5_1; }

		//loc_tran
		public RuleCall getLTranLoc_tranParserRuleCall_5_1_0() { return cLTranLoc_tranParserRuleCall_5_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_6() { return cEqualsSignGreaterThanSignKeyword_6; }

		//rate=expr
		public Assignment getRateAssignment_7() { return cRateAssignment_7; }

		//expr
		public RuleCall getRateExprParserRuleCall_7_0() { return cRateExprParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class GeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "generator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueEXPAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueEXPExprParserRuleCall_2_0_0 = (RuleCall)cValueEXPAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cValueMinAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cValueMinExprParserRuleCall_2_1_0_0 = (RuleCall)cValueMinAssignment_2_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cValueMaxAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cValueMaxExprParserRuleCall_2_1_2_0 = (RuleCall)cValueMaxAssignment_2_1_2.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cValueListAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cValueListExprParserRuleCall_2_2_1_0 = (RuleCall)cValueListAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_2_2 = (Group)cGroup_2_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_2_0 = (Keyword)cGroup_2_2_2.eContents().get(0);
		private final Assignment cValueListAssignment_2_2_2_1 = (Assignment)cGroup_2_2_2.eContents().get(1);
		private final RuleCall cValueListExprParserRuleCall_2_2_2_1_0 = (RuleCall)cValueListAssignment_2_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2_3 = (Keyword)cGroup_2_2.eContents().get(3);
		
		//generator:
		//	name=ID "=" (valueEXP=expr | valueMin=expr "..." valueMax=expr | "{" valueList+=expr ("," valueList+=expr)+ "}");
		public ParserRule getRule() { return rule; }

		//name=ID "=" (valueEXP=expr | valueMin=expr "..." valueMax=expr | "{" valueList+=expr ("," valueList+=expr)+ "}")
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//valueEXP=expr | valueMin=expr "..." valueMax=expr | "{" valueList+=expr ("," valueList+=expr)+ "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//valueEXP=expr
		public Assignment getValueEXPAssignment_2_0() { return cValueEXPAssignment_2_0; }

		//expr
		public RuleCall getValueEXPExprParserRuleCall_2_0_0() { return cValueEXPExprParserRuleCall_2_0_0; }

		//valueMin=expr "..." valueMax=expr
		public Group getGroup_2_1() { return cGroup_2_1; }

		//valueMin=expr
		public Assignment getValueMinAssignment_2_1_0() { return cValueMinAssignment_2_1_0; }

		//expr
		public RuleCall getValueMinExprParserRuleCall_2_1_0_0() { return cValueMinExprParserRuleCall_2_1_0_0; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_2_1_1() { return cFullStopFullStopFullStopKeyword_2_1_1; }

		//valueMax=expr
		public Assignment getValueMaxAssignment_2_1_2() { return cValueMaxAssignment_2_1_2; }

		//expr
		public RuleCall getValueMaxExprParserRuleCall_2_1_2_0() { return cValueMaxExprParserRuleCall_2_1_2_0; }

		//"{" valueList+=expr ("," valueList+=expr)+ "}"
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_2_0() { return cLeftCurlyBracketKeyword_2_2_0; }

		//valueList+=expr
		public Assignment getValueListAssignment_2_2_1() { return cValueListAssignment_2_2_1; }

		//expr
		public RuleCall getValueListExprParserRuleCall_2_2_1_0() { return cValueListExprParserRuleCall_2_2_1_0; }

		//("," valueList+=expr)+
		public Group getGroup_2_2_2() { return cGroup_2_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_2_0() { return cCommaKeyword_2_2_2_0; }

		//valueList+=expr
		public Assignment getValueListAssignment_2_2_2_1() { return cValueListAssignment_2_2_2_1; }

		//expr
		public RuleCall getValueListExprParserRuleCall_2_2_2_1_0() { return cValueListExprParserRuleCall_2_2_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2_3() { return cRightCurlyBracketKeyword_2_2_3; }
	}

	public class Loc_tranElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "loc_tran");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNewKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cStateRefAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStateRefState_refParserRuleCall_0_1_0 = (RuleCall)cStateRefAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cKillKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStateRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStateRefState_refParserRuleCall_1_1_0 = (RuleCall)cStateRefAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cSCondAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSCondState_condParserRuleCall_2_0_0 = (RuleCall)cSCondAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cACondAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cACondAction_condParserRuleCall_2_2_0 = (RuleCall)cACondAssignment_2_2.eContents().get(0);
		
		//loc_tran:
		//	"new" stateRef=state_ref | "kill" stateRef=state_ref | sCond=state_cond ":" aCond=action_cond;
		public ParserRule getRule() { return rule; }

		//"new" stateRef=state_ref | "kill" stateRef=state_ref | sCond=state_cond ":" aCond=action_cond
		public Alternatives getAlternatives() { return cAlternatives; }

		//"new" stateRef=state_ref
		public Group getGroup_0() { return cGroup_0; }

		//"new"
		public Keyword getNewKeyword_0_0() { return cNewKeyword_0_0; }

		//stateRef=state_ref
		public Assignment getStateRefAssignment_0_1() { return cStateRefAssignment_0_1; }

		//state_ref
		public RuleCall getStateRefState_refParserRuleCall_0_1_0() { return cStateRefState_refParserRuleCall_0_1_0; }

		//"kill" stateRef=state_ref
		public Group getGroup_1() { return cGroup_1; }

		//"kill"
		public Keyword getKillKeyword_1_0() { return cKillKeyword_1_0; }

		//stateRef=state_ref
		public Assignment getStateRefAssignment_1_1() { return cStateRefAssignment_1_1; }

		//state_ref
		public RuleCall getStateRefState_refParserRuleCall_1_1_0() { return cStateRefState_refParserRuleCall_1_1_0; }

		//sCond=state_cond ":" aCond=action_cond
		public Group getGroup_2() { return cGroup_2; }

		//sCond=state_cond
		public Assignment getSCondAssignment_2_0() { return cSCondAssignment_2_0; }

		//state_cond
		public RuleCall getSCondState_condParserRuleCall_2_0_0() { return cSCondState_condParserRuleCall_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//aCond=action_cond
		public Assignment getACondAssignment_2_2() { return cACondAssignment_2_2; }

		//action_cond
		public RuleCall getACondAction_condParserRuleCall_2_2_0() { return cACondAction_condParserRuleCall_2_2_0; }
	}

	public class State_condElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "state_cond");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAnystateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAnyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStateRefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStateRefState_refParserRuleCall_1_0_0 = (RuleCall)cStateRefAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cOrKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cStateRefAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStateRefState_refParserRuleCall_1_1_1_0 = (RuleCall)cStateRefAssignment_1_1_1.eContents().get(0);
		
		//// qui potremmmo volere state_ref con parametri generali e non attuali per le regole
		//state_cond:
		//	{anystate} "any" | stateRef+=state_ref ("or" stateRef+=state_ref)*;
		public ParserRule getRule() { return rule; }

		//{anystate} "any" | stateRef+=state_ref ("or" stateRef+=state_ref)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//{anystate} "any"
		public Group getGroup_0() { return cGroup_0; }

		//{anystate}
		public Action getAnystateAction_0_0() { return cAnystateAction_0_0; }

		//"any"
		public Keyword getAnyKeyword_0_1() { return cAnyKeyword_0_1; }

		//stateRef+=state_ref ("or" stateRef+=state_ref)*
		public Group getGroup_1() { return cGroup_1; }

		//stateRef+=state_ref
		public Assignment getStateRefAssignment_1_0() { return cStateRefAssignment_1_0; }

		//state_ref
		public RuleCall getStateRefState_refParserRuleCall_1_0_0() { return cStateRefState_refParserRuleCall_1_0_0; }

		//("or" stateRef+=state_ref)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"or"
		public Keyword getOrKeyword_1_1_0() { return cOrKeyword_1_1_0; }

		//stateRef+=state_ref
		public Assignment getStateRefAssignment_1_1_1() { return cStateRefAssignment_1_1_1; }

		//state_ref
		public RuleCall getStateRefState_refParserRuleCall_1_1_1_0() { return cStateRefState_refParserRuleCall_1_1_1_0; }
	}

	public class State_refElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "state_ref");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cStateRefAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cStateRefStateCrossReference_0_0_0 = (CrossReference)cStateRefAssignment_0_0.eContents().get(0);
		private final RuleCall cStateRefStateIDTerminalRuleCall_0_0_0_1 = (RuleCall)cStateRefStateCrossReference_0_0_0.eContents().get(1);
		private final Assignment cActualParametersAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cActualParametersActual_parametersParserRuleCall_0_1_0 = (RuleCall)cActualParametersAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cInKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cLocRefAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final CrossReference cLocRefLocationCrossReference_0_2_1_0 = (CrossReference)cLocRefAssignment_0_2_1.eContents().get(0);
		private final RuleCall cLocRefLocationIDTerminalRuleCall_0_2_1_0_1 = (RuleCall)cLocRefLocationCrossReference_0_2_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAgentStateRefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cAgentStateRefAgentCrossReference_1_0_0 = (CrossReference)cAgentStateRefAssignment_1_0.eContents().get(0);
		private final RuleCall cAgentStateRefAgentIDTerminalRuleCall_1_0_0_1 = (RuleCall)cAgentStateRefAgentCrossReference_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStateRefAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cStateRefStateCrossReference_1_2_0 = (CrossReference)cStateRefAssignment_1_2.eContents().get(0);
		private final RuleCall cStateRefStateIDTerminalRuleCall_1_2_0_1 = (RuleCall)cStateRefStateCrossReference_1_2_0.eContents().get(1);
		private final Assignment cActualParametersAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cActualParametersActual_parametersParserRuleCall_1_3_0 = (RuleCall)cActualParametersAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cInKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cLocRefAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final CrossReference cLocRefLocationCrossReference_1_4_1_0 = (CrossReference)cLocRefAssignment_1_4_1.eContents().get(0);
		private final RuleCall cLocRefLocationIDTerminalRuleCall_1_4_1_0_1 = (RuleCall)cLocRefLocationCrossReference_1_4_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPopAgentStateRefAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cPopAgentStateRefPopulationCrossReference_2_0_0 = (CrossReference)cPopAgentStateRefAssignment_2_0.eContents().get(0);
		private final RuleCall cPopAgentStateRefPopulationIDTerminalRuleCall_2_0_0_1 = (RuleCall)cPopAgentStateRefPopulationCrossReference_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAgentStateRefAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cAgentStateRefAgentCrossReference_2_2_0 = (CrossReference)cAgentStateRefAssignment_2_2.eContents().get(0);
		private final RuleCall cAgentStateRefAgentIDTerminalRuleCall_2_2_0_1 = (RuleCall)cAgentStateRefAgentCrossReference_2_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cStateRefAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final CrossReference cStateRefStateCrossReference_2_4_0 = (CrossReference)cStateRefAssignment_2_4.eContents().get(0);
		private final RuleCall cStateRefStateIDTerminalRuleCall_2_4_0_1 = (RuleCall)cStateRefStateCrossReference_2_4_0.eContents().get(1);
		private final Assignment cActualParametersAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cActualParametersActual_parametersParserRuleCall_2_5_0 = (RuleCall)cActualParametersAssignment_2_5.eContents().get(0);
		private final Group cGroup_2_6 = (Group)cGroup_2.eContents().get(6);
		private final Keyword cInKeyword_2_6_0 = (Keyword)cGroup_2_6.eContents().get(0);
		private final Assignment cLocRefAssignment_2_6_1 = (Assignment)cGroup_2_6.eContents().get(1);
		private final CrossReference cLocRefLocationCrossReference_2_6_1_0 = (CrossReference)cLocRefAssignment_2_6_1.eContents().get(0);
		private final RuleCall cLocRefLocationIDTerminalRuleCall_2_6_1_0_1 = (RuleCall)cLocRefLocationCrossReference_2_6_1_0.eContents().get(1);
		
		//state_ref:
		//	stateRef=[state] actualParameters=actual_parameters? ("in" locRef=[location]) | agentStateRef=[agent] "."
		//	stateRef=[state] actualParameters=actual_parameters? ("in" locRef=[location]) | popAgentStateRef=[population] "."
		//	agentStateRef=[agent] "." stateRef=[state] actualParameters=actual_parameters? ("in" locRef=[location]);
		public ParserRule getRule() { return rule; }

		//stateRef=[state] actualParameters=actual_parameters? ("in" locRef=[location]) | agentStateRef=[agent] "."
		//stateRef=[state] actualParameters=actual_parameters? ("in" locRef=[location]) | popAgentStateRef=[population] "."
		//agentStateRef=[agent] "." stateRef=[state] actualParameters=actual_parameters? ("in" locRef=[location])
		public Alternatives getAlternatives() { return cAlternatives; }

		//stateRef=[state] actualParameters=actual_parameters? ("in" locRef=[location])
		public Group getGroup_0() { return cGroup_0; }

		//stateRef=[state]
		public Assignment getStateRefAssignment_0_0() { return cStateRefAssignment_0_0; }

		//[state]
		public CrossReference getStateRefStateCrossReference_0_0_0() { return cStateRefStateCrossReference_0_0_0; }

		//ID
		public RuleCall getStateRefStateIDTerminalRuleCall_0_0_0_1() { return cStateRefStateIDTerminalRuleCall_0_0_0_1; }

		//actualParameters=actual_parameters?
		public Assignment getActualParametersAssignment_0_1() { return cActualParametersAssignment_0_1; }

		//actual_parameters
		public RuleCall getActualParametersActual_parametersParserRuleCall_0_1_0() { return cActualParametersActual_parametersParserRuleCall_0_1_0; }

		//"in" locRef=[location]
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"in"
		public Keyword getInKeyword_0_2_0() { return cInKeyword_0_2_0; }

		//locRef=[location]
		public Assignment getLocRefAssignment_0_2_1() { return cLocRefAssignment_0_2_1; }

		//[location]
		public CrossReference getLocRefLocationCrossReference_0_2_1_0() { return cLocRefLocationCrossReference_0_2_1_0; }

		//ID
		public RuleCall getLocRefLocationIDTerminalRuleCall_0_2_1_0_1() { return cLocRefLocationIDTerminalRuleCall_0_2_1_0_1; }

		//agentStateRef=[agent] "." stateRef=[state] actualParameters=actual_parameters? ("in" locRef=[location])
		public Group getGroup_1() { return cGroup_1; }

		//agentStateRef=[agent]
		public Assignment getAgentStateRefAssignment_1_0() { return cAgentStateRefAssignment_1_0; }

		//[agent]
		public CrossReference getAgentStateRefAgentCrossReference_1_0_0() { return cAgentStateRefAgentCrossReference_1_0_0; }

		//ID
		public RuleCall getAgentStateRefAgentIDTerminalRuleCall_1_0_0_1() { return cAgentStateRefAgentIDTerminalRuleCall_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//stateRef=[state]
		public Assignment getStateRefAssignment_1_2() { return cStateRefAssignment_1_2; }

		//[state]
		public CrossReference getStateRefStateCrossReference_1_2_0() { return cStateRefStateCrossReference_1_2_0; }

		//ID
		public RuleCall getStateRefStateIDTerminalRuleCall_1_2_0_1() { return cStateRefStateIDTerminalRuleCall_1_2_0_1; }

		//actualParameters=actual_parameters?
		public Assignment getActualParametersAssignment_1_3() { return cActualParametersAssignment_1_3; }

		//actual_parameters
		public RuleCall getActualParametersActual_parametersParserRuleCall_1_3_0() { return cActualParametersActual_parametersParserRuleCall_1_3_0; }

		//"in" locRef=[location]
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"in"
		public Keyword getInKeyword_1_4_0() { return cInKeyword_1_4_0; }

		//locRef=[location]
		public Assignment getLocRefAssignment_1_4_1() { return cLocRefAssignment_1_4_1; }

		//[location]
		public CrossReference getLocRefLocationCrossReference_1_4_1_0() { return cLocRefLocationCrossReference_1_4_1_0; }

		//ID
		public RuleCall getLocRefLocationIDTerminalRuleCall_1_4_1_0_1() { return cLocRefLocationIDTerminalRuleCall_1_4_1_0_1; }

		//popAgentStateRef=[population] "." agentStateRef=[agent] "." stateRef=[state] actualParameters=actual_parameters? ("in"
		//locRef=[location])
		public Group getGroup_2() { return cGroup_2; }

		//popAgentStateRef=[population]
		public Assignment getPopAgentStateRefAssignment_2_0() { return cPopAgentStateRefAssignment_2_0; }

		//[population]
		public CrossReference getPopAgentStateRefPopulationCrossReference_2_0_0() { return cPopAgentStateRefPopulationCrossReference_2_0_0; }

		//ID
		public RuleCall getPopAgentStateRefPopulationIDTerminalRuleCall_2_0_0_1() { return cPopAgentStateRefPopulationIDTerminalRuleCall_2_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }

		//agentStateRef=[agent]
		public Assignment getAgentStateRefAssignment_2_2() { return cAgentStateRefAssignment_2_2; }

		//[agent]
		public CrossReference getAgentStateRefAgentCrossReference_2_2_0() { return cAgentStateRefAgentCrossReference_2_2_0; }

		//ID
		public RuleCall getAgentStateRefAgentIDTerminalRuleCall_2_2_0_1() { return cAgentStateRefAgentIDTerminalRuleCall_2_2_0_1; }

		//"."
		public Keyword getFullStopKeyword_2_3() { return cFullStopKeyword_2_3; }

		//stateRef=[state]
		public Assignment getStateRefAssignment_2_4() { return cStateRefAssignment_2_4; }

		//[state]
		public CrossReference getStateRefStateCrossReference_2_4_0() { return cStateRefStateCrossReference_2_4_0; }

		//ID
		public RuleCall getStateRefStateIDTerminalRuleCall_2_4_0_1() { return cStateRefStateIDTerminalRuleCall_2_4_0_1; }

		//actualParameters=actual_parameters?
		public Assignment getActualParametersAssignment_2_5() { return cActualParametersAssignment_2_5; }

		//actual_parameters
		public RuleCall getActualParametersActual_parametersParserRuleCall_2_5_0() { return cActualParametersActual_parametersParserRuleCall_2_5_0; }

		//"in" locRef=[location]
		public Group getGroup_2_6() { return cGroup_2_6; }

		//"in"
		public Keyword getInKeyword_2_6_0() { return cInKeyword_2_6_0; }

		//locRef=[location]
		public Assignment getLocRefAssignment_2_6_1() { return cLocRefAssignment_2_6_1; }

		//[location]
		public CrossReference getLocRefLocationCrossReference_2_6_1_0() { return cLocRefLocationCrossReference_2_6_1_0; }

		//ID
		public RuleCall getLocRefLocationIDTerminalRuleCall_2_6_1_0_1() { return cLocRefLocationIDTerminalRuleCall_2_6_1_0_1; }
	}

	public class Action_condElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "action_cond");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAnystateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAnyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cActionRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cActionRefLabelCrossReference_1_0 = (CrossReference)cActionRefAssignment_1.eContents().get(0);
		private final RuleCall cActionRefLabelIDTerminalRuleCall_1_0_1 = (RuleCall)cActionRefLabelCrossReference_1_0.eContents().get(1);
		
		//action_cond:
		//	{anystate} "any" | actionRef=[label];
		public ParserRule getRule() { return rule; }

		//{anystate} "any" | actionRef=[label]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{anystate} "any"
		public Group getGroup_0() { return cGroup_0; }

		//{anystate}
		public Action getAnystateAction_0_0() { return cAnystateAction_0_0; }

		//"any"
		public Keyword getAnyKeyword_0_1() { return cAnyKeyword_0_1; }

		//actionRef=[label]
		public Assignment getActionRefAssignment_1() { return cActionRefAssignment_1; }

		//[label]
		public CrossReference getActionRefLabelCrossReference_1_0() { return cActionRefLabelCrossReference_1_0; }

		//ID
		public RuleCall getActionRefLabelIDTerminalRuleCall_1_0_1() { return cActionRefLabelIDTerminalRuleCall_1_0_1; }
	}
	
	
	private final MainElements pMain;
	private final ConstantElements pConstant;
	private final ExprElements pExpr;
	private final ParamsElements pParams;
	private final Actual_parametersElements pActual_parameters;
	private final LocationElements pLocation;
	private final AgentElements pAgent;
	private final LabelElements pLabel;
	private final StateElements pState;
	private final ActionElements pAction;
	private final ExprovaElements pExprova;
	private final PopulationElements pPopulation;
	private final InitElements pInit;
	private final StateInitElements pStateInit;
	private final Gl_tranElements pGl_tran;
	private final GeneratorElements pGenerator;
	private final Loc_tranElements pLoc_tran;
	private final State_condElements pState_cond;
	private final State_refElements pState_ref;
	private final Action_condElements pAction_cond;
	private final TerminalRule tINT;
	private final TerminalRule tFLOAT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MarkovPopulationModelsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMain = new MainElements();
		this.pConstant = new ConstantElements();
		this.pExpr = new ExprElements();
		this.pParams = new ParamsElements();
		this.pActual_parameters = new Actual_parametersElements();
		this.pLocation = new LocationElements();
		this.pAgent = new AgentElements();
		this.pLabel = new LabelElements();
		this.pState = new StateElements();
		this.pAction = new ActionElements();
		this.pExprova = new ExprovaElements();
		this.pPopulation = new PopulationElements();
		this.pInit = new InitElements();
		this.pStateInit = new StateInitElements();
		this.pGl_tran = new Gl_tranElements();
		this.pGenerator = new GeneratorElements();
		this.pLoc_tran = new Loc_tranElements();
		this.pState_cond = new State_condElements();
		this.pState_ref = new State_refElements();
		this.pAction_cond = new Action_condElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("imt.simhya.language.MarkovPopulationModels".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////extension
	//main:
	//	constDef+=constant* & locationDef=location? & agentDef+=agent+ & populationDef+=population+;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}

	//constant:
	//	"const integer" name=ID "=" constINT=INT | "const real" name=ID "=" constFLOAT=FLOAT;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	////stateRef=[state]	
	//expr:
	//	constRef=[constant] | constFLOAT=FLOAT | constINT=INT;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//params:
	//	"[" params+=ID ("," params+=ID)* "]";
	public ParamsElements getParamsAccess() {
		return pParams;
	}
	
	public ParserRule getParamsRule() {
		return getParamsAccess().getRule();
	}

	//actual_parameters:
	//	"[" actualParams+=expr ("," actualParams+=expr)* "]";
	public Actual_parametersElements getActual_parametersAccess() {
		return pActual_parameters;
	}
	
	public ParserRule getActual_parametersRule() {
		return getActual_parametersAccess().getRule();
	}

	//location:
	//	"location" name=ID paramList=params? "{" "actions" act+=label+ s+=state+ "}";
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}

	//agent:
	//	"agent" name=ID paramList=params? "{" "actions" act+=label+ s+=state+ "}";
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}

	//label:
	//	name=ID;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//state:
	//	"state" name=ID paramList=params? "{" spontaneousAct+=action+ "}";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//// TODO guards
	//// no state[params] but state[param_expr]
	//action:
	//	actRef=[label] "-->" stateRef=[state] ("[" params+=exprova ("," params+=exprova)* "]")? ":" localRate=expr;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//exprova:
	//	expr=ID | expr=ID "+" num=INT | expr=ID "-" num=INT | num=INT;
	public ExprovaElements getExprovaAccess() {
		return pExprova;
	}
	
	public ParserRule getExprovaRule() {
		return getExprovaAccess().getRule();
	}

	//population:
	//	"population" name=ID paramList=params? "{" "init" agents+=init ("||" agents+=init)* tran+=gl_tran+ "}";
	public PopulationElements getPopulationAccess() {
		return pPopulation;
	}
	
	public ParserRule getPopulationRule() {
		return getPopulationAccess().getRule();
	}

	//init:
	//	agentRef=[agent] actualParameters=actual_parameters? "{" states+=stateInit ("," states+=stateInit)* "}" ("in"
	//	locRef=[location])? | popRef=[population] "{" card=expr "}" ("in" locRef=[location])?;
	public InitElements getInitAccess() {
		return pInit;
	}
	
	public ParserRule getInitRule() {
		return getInitAccess().getRule();
	}

	//stateInit:
	//	stateRef=state_ref "=" card=expr;
	public StateInitElements getStateInitAccess() {
		return pStateInit;
	}
	
	public ParserRule getStateInitRule() {
		return getStateInitAccess().getRule();
	}

	//gl_tran:
	//	"transition" name=ID ("[" generators+=generator (";" generators+=generator)* "]")? "{" lTran+=loc_tran ("&"
	//	lTran+=loc_tran)* "=>" rate=expr "}";
	public Gl_tranElements getGl_tranAccess() {
		return pGl_tran;
	}
	
	public ParserRule getGl_tranRule() {
		return getGl_tranAccess().getRule();
	}

	//generator:
	//	name=ID "=" (valueEXP=expr | valueMin=expr "..." valueMax=expr | "{" valueList+=expr ("," valueList+=expr)+ "}");
	public GeneratorElements getGeneratorAccess() {
		return pGenerator;
	}
	
	public ParserRule getGeneratorRule() {
		return getGeneratorAccess().getRule();
	}

	//loc_tran:
	//	"new" stateRef=state_ref | "kill" stateRef=state_ref | sCond=state_cond ":" aCond=action_cond;
	public Loc_tranElements getLoc_tranAccess() {
		return pLoc_tran;
	}
	
	public ParserRule getLoc_tranRule() {
		return getLoc_tranAccess().getRule();
	}

	//// qui potremmmo volere state_ref con parametri generali e non attuali per le regole
	//state_cond:
	//	{anystate} "any" | stateRef+=state_ref ("or" stateRef+=state_ref)*;
	public State_condElements getState_condAccess() {
		return pState_cond;
	}
	
	public ParserRule getState_condRule() {
		return getState_condAccess().getRule();
	}

	//state_ref:
	//	stateRef=[state] actualParameters=actual_parameters? ("in" locRef=[location]) | agentStateRef=[agent] "."
	//	stateRef=[state] actualParameters=actual_parameters? ("in" locRef=[location]) | popAgentStateRef=[population] "."
	//	agentStateRef=[agent] "." stateRef=[state] actualParameters=actual_parameters? ("in" locRef=[location]);
	public State_refElements getState_refAccess() {
		return pState_ref;
	}
	
	public ParserRule getState_refRule() {
		return getState_refAccess().getRule();
	}

	//action_cond:
	//	{anystate} "any" | actionRef=[label];
	public Action_condElements getAction_condAccess() {
		return pAction_cond;
	}
	
	public ParserRule getAction_condRule() {
		return getAction_condAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	////  ('-')? (INT)* ('.' (INT)+)? |
	////  ('-')? (INT)+ ('.') | 
	////  ('-')? (INT)+ ('.' (INT)*)? (('e'|'E')('-'|'+')? (INT)+); terminal FLOAT returns ecore::EDouble:
	//	"-"? INT "." INT;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
