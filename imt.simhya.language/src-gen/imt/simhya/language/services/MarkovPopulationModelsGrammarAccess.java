/*
* generated by Xtext
*/
package imt.simhya.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MarkovPopulationModelsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cActionsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActLabelParserRuleCall_4_0 = (RuleCall)cActAssignment_4.eContents().get(0);
		private final Assignment cSAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSStateParserRuleCall_5_0 = (RuleCall)cSAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//agent:
		//	"agent" name=ID "{" "actions" act+=label+ s+=state+ "}";
		public ParserRule getRule() { return rule; }

		//"agent" name=ID "{" "actions" act+=label+ s+=state+ "}"
		public Group getGroup() { return cGroup; }

		//"agent"
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"actions"
		public Keyword getActionsKeyword_3() { return cActionsKeyword_3; }

		//act+=label+
		public Assignment getActAssignment_4() { return cActAssignment_4; }

		//label
		public RuleCall getActLabelParserRuleCall_4_0() { return cActLabelParserRuleCall_4_0; }

		//s+=state+
		public Assignment getSAssignment_5() { return cSAssignment_5; }

		//state
		public RuleCall getSStateParserRuleCall_5_0() { return cSStateParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "label");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//label:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "state");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpontaneous_actAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpontaneous_actActionParserRuleCall_3_0 = (RuleCall)cSpontaneous_actAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//state:
		//	"state" name=ID "{" spontaneous_act+=action+ "}";
		public ParserRule getRule() { return rule; }

		//"state" name=ID "{" spontaneous_act+=action+ "}"
		public Group getGroup() { return cGroup; }

		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//spontaneous_act+=action+
		public Assignment getSpontaneous_actAssignment_3() { return cSpontaneous_actAssignment_3; }

		//action
		public RuleCall getSpontaneous_actActionParserRuleCall_3_0() { return cSpontaneous_actActionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActRefLabelCrossReference_0_0 = (CrossReference)cActRefAssignment_0.eContents().get(0);
		private final RuleCall cActRefLabelIDTerminalRuleCall_0_0_1 = (RuleCall)cActRefLabelCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateRefStateCrossReference_2_0 = (CrossReference)cStateRefAssignment_2.eContents().get(0);
		private final RuleCall cStateRefStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateRefStateCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLocalRateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLocalRateFLOATTerminalRuleCall_4_0 = (RuleCall)cLocalRateAssignment_4.eContents().get(0);
		
		//// TODO guards
		//action:
		//	actRef=[label] "-->" stateRef=[state] ":" localRate=FLOAT;
		public ParserRule getRule() { return rule; }

		//actRef=[label] "-->" stateRef=[state] ":" localRate=FLOAT
		public Group getGroup() { return cGroup; }

		//actRef=[label]
		public Assignment getActRefAssignment_0() { return cActRefAssignment_0; }

		//[label]
		public CrossReference getActRefLabelCrossReference_0_0() { return cActRefLabelCrossReference_0_0; }

		//ID
		public RuleCall getActRefLabelIDTerminalRuleCall_0_0_1() { return cActRefLabelIDTerminalRuleCall_0_0_1; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1; }

		//stateRef=[state]
		public Assignment getStateRefAssignment_2() { return cStateRefAssignment_2; }

		//[state]
		public CrossReference getStateRefStateCrossReference_2_0() { return cStateRefStateCrossReference_2_0; }

		//ID
		public RuleCall getStateRefStateIDTerminalRuleCall_2_0_1() { return cStateRefStateIDTerminalRuleCall_2_0_1; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//localRate=FLOAT
		public Assignment getLocalRateAssignment_4() { return cLocalRateAssignment_4; }

		//FLOAT
		public RuleCall getLocalRateFLOATTerminalRuleCall_4_0() { return cLocalRateFLOATTerminalRuleCall_4_0; }
	}
	
	
	private final AgentElements pAgent;
	private final LabelElements pLabel;
	private final StateElements pState;
	private final ActionElements pAction;
	private final TerminalRule tINT;
	private final TerminalRule tFLOAT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MarkovPopulationModelsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAgent = new AgentElements();
		this.pLabel = new LabelElements();
		this.pState = new StateElements();
		this.pAction = new ActionElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("imt.simhya.language.MarkovPopulationModels".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//agent:
	//	"agent" name=ID "{" "actions" act+=label+ s+=state+ "}";
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}

	//label:
	//	name=ID;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//state:
	//	"state" name=ID "{" spontaneous_act+=action+ "}";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//// TODO guards
	//action:
	//	actRef=[label] "-->" stateRef=[state] ":" localRate=FLOAT;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal FLOAT returns ecore::EDouble:
	//	"-"? INT* ("." INT+)? | "-"? INT+ "." | "-"? INT+ ("." INT*)? (("e" | "E") ("-" | "+")? INT+);
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
