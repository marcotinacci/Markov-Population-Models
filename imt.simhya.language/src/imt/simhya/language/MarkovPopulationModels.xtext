grammar imt.simhya.language.MarkovPopulationModels with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate markovPopulationModels "http://www.simhya.imt/language/MarkovPopulationModels"

//extension

main:
	populationDef=population & agentDef=agent
;

population:
	'population' name=ID '{'
		'init' agents+=init ('||' agents+=init)*
		tran+= gl_tran+
	'}'
;

init:
	agentRef=[agent] '{'
		states+=stateInit (',' states+=stateInit)*
	'}'
;

stateInit:
	stateRef=state_ref '=' card=Expression	
;

gl_tran:
	'transition'
	name=ID '{'
		lTran+=loc_tran ('&' lTran+=loc_tran)* '=>' rate=Expression
	'}'
;

loc_tran:
	'new' stateRef=[state]|
	'kill' stateRef=[state]|
	 sCond= state_cond ':' aCond=action_cond	
;

state_cond:
	{anystate} 'any' |
	stateRef=state_ref
;

state_ref:
	stateRef=[state]
;

action_cond:
	{anystate} 'any' |
	actionRef= [label]	
;

agent:
	'agent' name=ID '{'
		'actions' act+=label+
		s+=state+
	'}'
;

label:
	name=ID
;

state:
	'state' name=ID '{'
		spontaneousAct+=action+
	'}'
;

// ===================
// === EXPRESSIONS ===
// ===================

Expression:
	SummationSubtraction
;

SummationSubtraction returns Expression:
	MultiplicationDivision ({SummationSubtraction.left=current} op=('+'|'-') right=SummationSubtraction )?
;

MultiplicationDivision returns Expression:
	BaseExpression ({MultiplicationDivision.left=current} op=('*'|'/') right=MultiplicationDivision )?
;

BaseExpression returns Expression:
	{IntExpression} INT
	| {FloatExpression} FLOAT
	| {Reference} stateRef=state_ref
	| '(' Expression ')'
;

// TODO guards
action:
	actRef=[label] '-->' stateRef=[state] ':' localRate=Expression
;

terminal INT returns ecore::EInt: ('0'..'9')+;

terminal FLOAT returns ecore::EDouble:
	'-'? INT '.' INT
;
//  ('-')? (INT)* ('.' (INT)+)? |
//  ('-')? (INT)+ ('.') | 
//  ('-')? (INT)+ ('.' (INT)*)? (('e'|'E')('-'|'+')? (INT)+);