grammar imt.simhya.language.MarkovPopulationModels with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate markovPopulationModels "http://www.simhya.imt/language/MarkovPopulationModels"

//extension

main:
	(constDef+= constant)* & (locationDef=location)?  & (agentDef+=agent)+ & (populationDef+=population)+
;

constant:
	'const integer' name=ID '=' constINT=INT |
	'const real' name=ID '=' constFLOAT=FLOAT
;

expr:
	constRef= [constant]|
	constFLOAT= FLOAT|
	constINT= INT
	//stateRef=[state]	
;

params:
	'[' params+= ID (',' params+= ID)*']'	
;

actual_parameters:
	'[' actualParams+= expr (',' actualParams+= expr)*']'	
;


location:
	'location' name=ID paramList=params? '{'
		'actions' act+=label+
		s+=state+
	'}'
	
;

agent:
	'agent' name=ID paramList=params?	'{'
		'actions' act+=label+
		s+=state+
	'}'
;

label:
	name=ID
;

state:
	'state' name=ID paramList=params?	 '{'
		spontaneousAct+=action+
	'}'
;


// TODO guards
// no state[params] but state[param_expr]
action:
	actRef=[label] '-->' stateRef=[state] ('[' params+=exprova (',' params+=exprova)*']')? ':' localRate=expr
;

exprova:
	expr= ID|
	expr= ID '+' num=INT|
	expr= ID '-' num=INT|
	num=INT
;


population:
	'population' name=ID paramList=params? '{'
		'init' agents+=init ('||' agents+=init)*
		tran+= gl_tran+
	'}'
;

init:
	(agentRef=[agent] actualParameters=actual_parameters? ('in' locRef=[location])? '{'
		states+=stateInit (',' states+=stateInit)*
	'}'  )|
	(popRef=[population] ('in' locRef=[location])? '{' card=expr'}' )
;

stateInit:
	stateRef=state_ref '=' card=expr
;

gl_tran:
	'transition'
	name=ID ('[' generators+=generator (';' generators+=generator)*']')? '{'
		lTran+=loc_tran ('&' lTran+=loc_tran)* '=>' rate=expr
	'}'
;

generator:
	name=ID '='	( 
		valueEXP=expr | 
		valueMin = expr '...' valueMax = expr |
		'{' valueList+= expr (',' valueList+= expr )+ '}'
		)
;

loc_tran:
	'new' stateRef=state_ref|
	'kill' stateRef=state_ref|
	 sCond= state_cond ':' aCond=action_cond	
;

state_cond:
	{anystate} 'any' |
	stateRef+=state_ref ('or' stateRef+= state_ref)* 
	// qui potremmmo volere state_ref con parametri generali e non attuali per le regole
;

state_ref:
	(stateRef=[state] actualParameters=actual_parameters? ('in' locRef=[location])	)|
	(agentStateRef= [agent]'.'stateRef = [state] actualParameters=actual_parameters? ('in' locRef=[location])	)|
	(popAgentStateRef= [population]'.'agentStateRef=[agent]'.'stateRef = [state] actualParameters=actual_parameters? ('in' locRef=[location])	)
;

action_cond:
	{anystate} 'any' |
	actionRef= [label]	
;

terminal INT returns ecore::EInt: ('0'..'9')+;

terminal FLOAT returns ecore::EDouble:
	'-'? INT '.' INT
;
//  ('-')? (INT)* ('.' (INT)+)? |
//  ('-')? (INT)+ ('.') | 
//  ('-')? (INT)+ ('.' (INT)*)? (('e'|'E')('-'|'+')? (INT)+);