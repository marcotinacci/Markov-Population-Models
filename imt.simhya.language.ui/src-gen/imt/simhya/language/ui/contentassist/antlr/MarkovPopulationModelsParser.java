/*
* generated by Xtext
*/
package imt.simhya.language.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import imt.simhya.language.services.MarkovPopulationModelsGrammarAccess;

public class MarkovPopulationModelsParser extends AbstractContentAssistParser {
	
	@Inject
	private MarkovPopulationModelsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected imt.simhya.language.ui.contentassist.antlr.internal.InternalMarkovPopulationModelsParser createParser() {
		imt.simhya.language.ui.contentassist.antlr.internal.InternalMarkovPopulationModelsParser result = new imt.simhya.language.ui.contentassist.antlr.internal.InternalMarkovPopulationModelsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAgentAccess().getGroup(), "rule__Agent__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
					put(grammarAccess.getAgentAccess().getNameAssignment_1(), "rule__Agent__NameAssignment_1");
					put(grammarAccess.getAgentAccess().getActAssignment_4(), "rule__Agent__ActAssignment_4");
					put(grammarAccess.getAgentAccess().getSAssignment_5(), "rule__Agent__SAssignment_5");
					put(grammarAccess.getLabelAccess().getNameAssignment(), "rule__Label__NameAssignment");
					put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
					put(grammarAccess.getStateAccess().getSpontaneous_actAssignment_3(), "rule__State__Spontaneous_actAssignment_3");
					put(grammarAccess.getActionAccess().getActRefAssignment_0(), "rule__Action__ActRefAssignment_0");
					put(grammarAccess.getActionAccess().getStateRefAssignment_2(), "rule__Action__StateRefAssignment_2");
					put(grammarAccess.getActionAccess().getLocalRateAssignment_4(), "rule__Action__LocalRateAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			imt.simhya.language.ui.contentassist.antlr.internal.InternalMarkovPopulationModelsParser typedParser = (imt.simhya.language.ui.contentassist.antlr.internal.InternalMarkovPopulationModelsParser) parser;
			typedParser.entryRuleagent();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MarkovPopulationModelsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MarkovPopulationModelsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
